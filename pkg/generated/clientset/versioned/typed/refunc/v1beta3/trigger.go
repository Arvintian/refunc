/*
Copyright 2018 The refunc Authors

TODO: choose a opensource licence.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta3

import (
	v1beta3 "github.com/refunc/refunc/pkg/apis/refunc/v1beta3"
	scheme "github.com/refunc/refunc/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// TriggersGetter has a method to return a TriggerInterface.
// A group's client should implement this interface.
type TriggersGetter interface {
	Triggers(namespace string) TriggerInterface
}

// TriggerInterface has methods to work with Trigger resources.
type TriggerInterface interface {
	Create(*v1beta3.Trigger) (*v1beta3.Trigger, error)
	Update(*v1beta3.Trigger) (*v1beta3.Trigger, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta3.Trigger, error)
	List(opts v1.ListOptions) (*v1beta3.TriggerList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta3.Trigger, err error)
	TriggerExpansion
}

// triggers implements TriggerInterface
type triggers struct {
	client rest.Interface
	ns     string
}

// newTriggers returns a Triggers
func newTriggers(c *RefuncV1beta3Client, namespace string) *triggers {
	return &triggers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the trigger, and returns the corresponding trigger object, and an error if there is any.
func (c *triggers) Get(name string, options v1.GetOptions) (result *v1beta3.Trigger, err error) {
	result = &v1beta3.Trigger{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("triggers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Triggers that match those selectors.
func (c *triggers) List(opts v1.ListOptions) (result *v1beta3.TriggerList, err error) {
	result = &v1beta3.TriggerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("triggers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested triggers.
func (c *triggers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("triggers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a trigger and creates it.  Returns the server's representation of the trigger, and an error, if there is any.
func (c *triggers) Create(trigger *v1beta3.Trigger) (result *v1beta3.Trigger, err error) {
	result = &v1beta3.Trigger{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("triggers").
		Body(trigger).
		Do().
		Into(result)
	return
}

// Update takes the representation of a trigger and updates it. Returns the server's representation of the trigger, and an error, if there is any.
func (c *triggers) Update(trigger *v1beta3.Trigger) (result *v1beta3.Trigger, err error) {
	result = &v1beta3.Trigger{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("triggers").
		Name(trigger.Name).
		Body(trigger).
		Do().
		Into(result)
	return
}

// Delete takes name of the trigger and deletes it. Returns an error if one occurs.
func (c *triggers) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("triggers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *triggers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("triggers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched trigger.
func (c *triggers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta3.Trigger, err error) {
	result = &v1beta3.Trigger{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("triggers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
